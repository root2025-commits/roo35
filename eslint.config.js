import __vite__cjsImport0__eslint_js from "/node_modules/.vite/deps/@eslint_js.js?v=b780b959"; const js = __vite__cjsImport0__eslint_js.__esModule ? __vite__cjsImport0__eslint_js.default : __vite__cjsImport0__eslint_js;
import __vite__cjsImport1_globals from "/node_modules/.vite/deps/globals.js?v=db8c5e92"; const globals = __vite__cjsImport1_globals.__esModule ? __vite__cjsImport1_globals.default : __vite__cjsImport1_globals;
import __vite__cjsImport2_eslintPluginReactHooks from "/node_modules/.vite/deps/eslint-plugin-react-hooks.js?v=c8596a51"; const reactHooks = __vite__cjsImport2_eslintPluginReactHooks.__esModule ? __vite__cjsImport2_eslintPluginReactHooks.default : __vite__cjsImport2_eslintPluginReactHooks;
import __vite__cjsImport3_eslintPluginReactRefresh from "/node_modules/.vite/deps/eslint-plugin-react-refresh.js?v=24f5aca0"; const reactRefresh = __vite__cjsImport3_eslintPluginReactRefresh.__esModule ? __vite__cjsImport3_eslintPluginReactRefresh.default : __vite__cjsImport3_eslintPluginReactRefresh;
import __vite__cjsImport4_typescriptEslint from "/node_modules/.vite/deps/typescript-eslint.js?v=af78c335"; const tseslint = __vite__cjsImport4_typescriptEslint.__esModule ? __vite__cjsImport4_typescriptEslint.default : __vite__cjsImport4_typescriptEslint;

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzbGludC5jb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9fdml0ZV9fY2pzSW1wb3J0MF9fZXNsaW50X2pzIGZyb20gXCIvbm9kZV9tb2R1bGVzLy52aXRlL2RlcHMvQGVzbGludF9qcy5qcz92PWI3ODBiOTU5XCI7IGNvbnN0IGpzID0gX192aXRlX19janNJbXBvcnQwX19lc2xpbnRfanMuX19lc01vZHVsZSA/IF9fdml0ZV9fY2pzSW1wb3J0MF9fZXNsaW50X2pzLmRlZmF1bHQgOiBfX3ZpdGVfX2Nqc0ltcG9ydDBfX2VzbGludF9qcztcbmltcG9ydCBfX3ZpdGVfX2Nqc0ltcG9ydDFfZ2xvYmFscyBmcm9tIFwiL25vZGVfbW9kdWxlcy8udml0ZS9kZXBzL2dsb2JhbHMuanM/dj1kYjhjNWU5MlwiOyBjb25zdCBnbG9iYWxzID0gX192aXRlX19janNJbXBvcnQxX2dsb2JhbHMuX19lc01vZHVsZSA/IF9fdml0ZV9fY2pzSW1wb3J0MV9nbG9iYWxzLmRlZmF1bHQgOiBfX3ZpdGVfX2Nqc0ltcG9ydDFfZ2xvYmFscztcbmltcG9ydCBfX3ZpdGVfX2Nqc0ltcG9ydDJfZXNsaW50UGx1Z2luUmVhY3RIb29rcyBmcm9tIFwiL25vZGVfbW9kdWxlcy8udml0ZS9kZXBzL2VzbGludC1wbHVnaW4tcmVhY3QtaG9va3MuanM/dj1jODU5NmE1MVwiOyBjb25zdCByZWFjdEhvb2tzID0gX192aXRlX19janNJbXBvcnQyX2VzbGludFBsdWdpblJlYWN0SG9va3MuX19lc01vZHVsZSA/IF9fdml0ZV9fY2pzSW1wb3J0Ml9lc2xpbnRQbHVnaW5SZWFjdEhvb2tzLmRlZmF1bHQgOiBfX3ZpdGVfX2Nqc0ltcG9ydDJfZXNsaW50UGx1Z2luUmVhY3RIb29rcztcbmltcG9ydCBfX3ZpdGVfX2Nqc0ltcG9ydDNfZXNsaW50UGx1Z2luUmVhY3RSZWZyZXNoIGZyb20gXCIvbm9kZV9tb2R1bGVzLy52aXRlL2RlcHMvZXNsaW50LXBsdWdpbi1yZWFjdC1yZWZyZXNoLmpzP3Y9MjRmNWFjYTBcIjsgY29uc3QgcmVhY3RSZWZyZXNoID0gX192aXRlX19janNJbXBvcnQzX2VzbGludFBsdWdpblJlYWN0UmVmcmVzaC5fX2VzTW9kdWxlID8gX192aXRlX19janNJbXBvcnQzX2VzbGludFBsdWdpblJlYWN0UmVmcmVzaC5kZWZhdWx0IDogX192aXRlX19janNJbXBvcnQzX2VzbGludFBsdWdpblJlYWN0UmVmcmVzaDtcbmltcG9ydCBfX3ZpdGVfX2Nqc0ltcG9ydDRfdHlwZXNjcmlwdEVzbGludCBmcm9tIFwiL25vZGVfbW9kdWxlcy8udml0ZS9kZXBzL3R5cGVzY3JpcHQtZXNsaW50LmpzP3Y9YWY3OGMzMzVcIjsgY29uc3QgdHNlc2xpbnQgPSBfX3ZpdGVfX2Nqc0ltcG9ydDRfdHlwZXNjcmlwdEVzbGludC5fX2VzTW9kdWxlID8gX192aXRlX19janNJbXBvcnQ0X3R5cGVzY3JpcHRFc2xpbnQuZGVmYXVsdCA6IF9fdml0ZV9fY2pzSW1wb3J0NF90eXBlc2NyaXB0RXNsaW50O1xuXG5leHBvcnQgZGVmYXVsdCB0c2VzbGludC5jb25maWcoXG4gIHsgaWdub3JlczogWydkaXN0J10gfSxcbiAge1xuICAgIGV4dGVuZHM6IFtqcy5jb25maWdzLnJlY29tbWVuZGVkLCAuLi50c2VzbGludC5jb25maWdzLnJlY29tbWVuZGVkXSxcbiAgICBmaWxlczogWycqKi8qLnt0cyx0c3h9J10sXG4gICAgbGFuZ3VhZ2VPcHRpb25zOiB7XG4gICAgICBlY21hVmVyc2lvbjogMjAyMCxcbiAgICAgIGdsb2JhbHM6IGdsb2JhbHMuYnJvd3NlcixcbiAgICB9LFxuICAgIHBsdWdpbnM6IHtcbiAgICAgICdyZWFjdC1ob29rcyc6IHJlYWN0SG9va3MsXG4gICAgICAncmVhY3QtcmVmcmVzaCc6IHJlYWN0UmVmcmVzaCxcbiAgICB9LFxuICAgIHJ1bGVzOiB7XG4gICAgICAuLi5yZWFjdEhvb2tzLmNvbmZpZ3MucmVjb21tZW5kZWQucnVsZXMsXG4gICAgICAncmVhY3QtcmVmcmVzaC9vbmx5LWV4cG9ydC1jb21wb25lbnRzJzogW1xuICAgICAgICAnd2FybicsXG4gICAgICAgIHsgYWxsb3dDb25zdGFudEV4cG9ydDogdHJ1ZSB9LFxuICAgICAgXSxcbiAgICB9LFxuICB9XG4pO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQztBQUMzTixNQUFNLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDO0FBQ2pOLE1BQU0sQ0FBQyx5Q0FBeUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyx5Q0FBeUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLHlDQUF5QyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMseUNBQXlDLENBQUM7QUFDbFMsTUFBTSxD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